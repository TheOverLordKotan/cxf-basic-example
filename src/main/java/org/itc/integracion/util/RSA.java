package org.itc.integracion.util;

import java.math.BigInteger;
import java.security.SecureRandom;

public class RSA {

	private static int tamPrimo = 1024;

	private static int AUMENTO_NEG = 2000;

	public static final ClaveRSA clave = new ClaveRSA(new BigInteger("22299090945883006969587587599393949300224215349008783320229011803330101518575"), new BigInteger("7095623373282220432552268950666537195879399738281605564534229203108392665007"), new BigInteger("48164018092158859938774739011816620180701642930247717806805587063177894911887"));
	public static final ClaveRSA clave32 = new ClaveRSA(new BigInteger("3363926259490249055"), new BigInteger("3418922220431034143"), new BigInteger("10264896168752348989"));

	private RSA() {
	}

	// -----

	public static ClaveRSA generaClaves() {
		return generaClaves(tamPrimo);
	}

	// -----

	public static ClaveRSA generaClaves(int tamPrimo) {

		BigInteger p = new BigInteger(tamPrimo, 10, new SecureRandom());
		BigInteger q;
		do {
			q = new BigInteger(tamPrimo, 10, new SecureRandom());
		} while (q.compareTo(p) == 0);

		BigInteger n = p.multiply(q);

		BigInteger totient = p.subtract(BigInteger.valueOf(1));
		totient = totient.multiply(q.subtract(BigInteger.valueOf(1)));

		BigInteger e, d;
		do {
			e = new BigInteger(2 * tamPrimo, new SecureRandom());
		} while ((e.compareTo(totient) != -1) || (e.gcd(totient).compareTo(BigInteger.valueOf(1)) != 0));
		d = e.modInverse(totient);

		return new ClaveRSA(d, e, n);
	}

	// -----

	public static String encripta(String mensaje, ClaveRSA clave) {

		return encripta(mensaje, clave, System.currentTimeMillis());
	}

	public static String encripta(String mensaje, ClaveRSA clave, long code) {

		mensaje = "RSA:" + mensaje + ":" + code;

		int i;
		byte[] temp = new byte[1];
		byte[] digitos = mensaje.getBytes();
		BigInteger[] bigdigitos = new BigInteger[digitos.length];

		for (i = 0; i < bigdigitos.length; i++) {
			temp[0] = digitos[i];

			int n = temp[0];
			if (n < 0) {
				n = n + AUMENTO_NEG;
			}

			bigdigitos[i] = new BigInteger(n + "");
		}

		BigInteger[] encriptado = new BigInteger[bigdigitos.length];

		for (i = 0; i < bigdigitos.length; i++) {
			encriptado[i] = bigdigitos[i].modPow(clave.getE(), clave.getN());
		}

		String salida = "";
		for (BigInteger bigInteger : encriptado) {
			salida = bigInteger.toString(22) + "z" + salida;
		}

		return salida.substring(0, salida.length() - 1).toUpperCase();
	}

	// -----

	public static String desencripta(String mensaje, ClaveRSA clave) {

		try {
			String str[] = mensaje.toLowerCase().split("[z]");

			BigInteger encriptado[] = new BigInteger[str.length];

			for (int i = 0; i < str.length; i++) {
				encriptado[i] = new BigInteger(str[str.length - i - 1], 22);
			}

			BigInteger[] desencriptado = new BigInteger[encriptado.length];

			for (int i = 0; i < desencriptado.length; i++)
				desencriptado[i] = encriptado[i].modPow(clave.getD(), clave.getN());

			byte[] charArray = new byte[desencriptado.length];

			for (int i = 0; i < charArray.length; i++) {
				int d = desencriptado[i].intValue();

				if (d > AUMENTO_NEG / 2) {
					d -= AUMENTO_NEG;
				}

				charArray[i] = (byte) d;
			}

			String desc = (new String(charArray));

			if (desc.indexOf("RSA:") != 0) {
				return null;
			}

			return desc.substring(4, desc.lastIndexOf(":"));

		} catch (Exception e) {
			return null;
		}

	}
	
	public static void main(String[] args) {
		System.out.println(RSA.desencripta("CRYPTO://100EDA019JHBE82D41010C0AL7L70JLIA7G923CKDIEL8H7A8H1JEF71EAZBBJ5691IHK5H231G54FC1L2E6A76JK3165C4A51040BB3LBA4B3KH9GK9Z100EDA019JHBE82D41010C0AL7L70JLIA7G923CKDIEL8H7A8H1JEF71EAZ14B23J0GG5ID0J4FA013F5E5D0IB0JCECC1A92B5LJBJ2CKD05L7C9029HZBBJ5691IHK5H231G54FC1L2E6A76JK3165C4A51040BB3LBA4B3KH9GK9ZKKHBGDF75L8JH7FJH6K0I3GFCC89IHCIJIK9HGK68FC1E7844219L6C8BZ16C7BA9HI19EBCEHFGD0J1IDFIBC5LHJBJIF95DAEJ8H3A87HEKL21GE69ZJC0B9CIFJG00G9EH65GG3H02CFHCE5BD0ID7A1A2C8422HA18354E5009Z16K1J8AFFIL3D0JBH02LG8064ECJE56FJBEH7D2L19BC5JGG7EF40KI2C1ZJC0B9CIFJG00G9EH65GG3H02CFHCE5BD0ID7A1A2C8422HA18354E5009Z16C7BA9HI19EBCEHFGD0J1IDFIBC5LHJBJIF95DAEJ8H3A87HEKL21GE69Z16C7BA9HI19EBCEHFGD0J1IDFIBC5LHJBJIF95DAEJ8H3A87HEKL21GE69Z6CAJCHL13HHGC996JF71C6521K6KK2FB05B540J82A7FAI7022KK6ACF9Z10250A725DK9KIKL91D297F3158DBF353EADBKHDA3G37CKIH43B5F827KZL58K6KE59AKAKK3C867JCGJ0BK6I1L551EAF1B6FJGA7EI322E6DG0L1JZ16C7BA9HI19EBCEHFGD0J1IDFIBC5LHJBJIF95DAEJ8H3A87HEKL21GE69ZJC0B9CIFJG00G9EH65GG3H02CFHCE5BD0ID7A1A2C8422HA18354E5009ZDI88JLJDCFD22J0CFKAHFG8H681608J13JE31141KC13J6GK1LE51LFCFZ100EDA019JHBE82D41010C0AL7L70JLIA7G923CKDIEL8H7A8H1JEF71EAZ6CAJCHL13HHGC996JF71C6521K6KK2FB05B540J82A7FAI7022KK6ACF9Z10250A725DK9KIKL91D297F3158DBF353EADBKHDA3G37CKIH43B5F827KZLHL0GL9KL1K5JBIGEEDDBK69KKEH1KDH0AFG83HFG1D1G9AG73I02HDCLZ17BDCIF155H9IKI6FB4F0C1IHDI0GBC5B3JBKD6FFH9EFGK4CIFE1754JAZDF21D94LI8I7D23EE06EHJCAI28KC3I22BH6JFH469B97BHEAC75A015H".substring(9), RSA.clave));
		System.out.println(RSA.desencripta("CRYPTO://JC0B9CIFJG00G9EH65GG3H02CFHCE5BD0ID7A1A2C8422HA18354E5009Z100EDA019JHBE82D41010C0AL7L70JLIA7G923CKDIEL8H7A8H1JEF71EAZ16K1J8AFFIL3D0JBH02LG8064ECJE56FJBEH7D2L19BC5JGG7EF40KI2C1ZKKHBGDF75L8JH7FJH6K0I3GFCC89IHCIJIK9HGK68FC1E7844219L6C8BZDI88JLJDCFD22J0CFKAHFG8H681608J13JE31141KC13J6GK1LE51LFCFZKKHBGDF75L8JH7FJH6K0I3GFCC89IHCIJIK9HGK68FC1E7844219L6C8BZ16C7BA9HI19EBCEHFGD0J1IDFIBC5LHJBJIF95DAEJ8H3A87HEKL21GE69ZJC0B9CIFJG00G9EH65GG3H02CFHCE5BD0ID7A1A2C8422HA18354E5009Z16K1J8AFFIL3D0JBH02LG8064ECJE56FJBEH7D2L19BC5JGG7EF40KI2C1ZJC0B9CIFJG00G9EH65GG3H02CFHCE5BD0ID7A1A2C8422HA18354E5009Z16C7BA9HI19EBCEHFGD0J1IDFIBC5LHJBJIF95DAEJ8H3A87HEKL21GE69Z16C7BA9HI19EBCEHFGD0J1IDFIBC5LHJBJIF95DAEJ8H3A87HEKL21GE69Z6CAJCHL13HHGC996JF71C6521K6KK2FB05B540J82A7FAI7022KK6ACF9Z10250A725DK9KIKL91D297F3158DBF353EADBKHDA3G37CKIH43B5F827KZ12720G3GC1FG3CDJ1HGILBA4BLK9GDFABD79353B235AACGL89H158314GZIB816EHF88L7F1305C23LIAEEAGECCDE497H7A853010DJGL435I55B6GZ151BD8C78BAA765B7A6D838J400GHA63A8ABH7I876626704D33GBJ5F1LZB2KD77I786ILFFE490JH56H08D8622C220JJF5DLHF5LL6J55385IA080Z4J6BJBL4A135621K8B22BL7BK3JEI62E0A4IJ20EIIK64E7D8KIA5JCFLZL2FBGJ9HH6GJK2K70E33H3K5AL8C4DCCJ1LKDE8GI1EE879C1911H6JI1Z4J6BJBL4A135621K8B22BL7BK3JEI62E0A4IJ20EIIK64E7D8KIA5JCFLZ151BD8C78BAA765B7A6D838J400GHA63A8ABH7I876626704D33GBJ5F1LZA67HKBI2FF9GG354C1E1BFK7ED04DCAHAAKEI55BA3EHF8478E51D02EHZ171K7L63877I3G642L11B81B3LGCAK37C6A8L576G4G744EF4LAC198KDZ10250A725DK9KIKL91D297F3158DBF353EADBKHDA3G37CKIH43B5F827KZLHL0GL9KL1K5JBIGEEDDBK69KKEH1KDH0AFG83HFG1D1G9AG73I02HDCLZ17BDCIF155H9IKI6FB4F0C1IHDI0GBC5B3JBKD6FFH9EFGK4CIFE1754JAZDF21D94LI8I7D23EE06EHJCAI28KC3I22BH6JFH469B97BHEAC75A015H".substring(9), RSA.clave));
	}

}